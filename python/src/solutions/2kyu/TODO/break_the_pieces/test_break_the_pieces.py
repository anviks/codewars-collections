"""https://www.codewars.com/kata/break-the-pieces"""
from parameterized import parameterized

from solution_break_the_pieces import break_pieces

try:
    from solution_break_the_pieces import raw_errors
except ImportError:
    raw_errors = False
import unittest

a = """
+------------+
|            |
|            |
|            |
+------+-----+
|      |     |
|      |     |
+------+-----+\
"""

test_data = [
    ('Description example',
     [("""
+------------+
|            |
|            |
|            |
+------+-----+
|      |     |
|      |     |
+------+-----+\
""",
       [
           """\
+-----+
|     |
|     |
+-----+\
""",
           """\
+------+
|      |
|      |
+------+\
""",
           """\
+------------+
|            |
|            |
|            |
+------------+\
"""
       ])]),
    ('Simple shapes',
     [(
         '\n+-------------------+--+\n|                   |  |\n|                   |  |\n|  +----------------+  |\n|  |                   |\n|  |                   |\n+--+-------------------+',
         [
             '                 +--+\n                 |  |\n                 |  |\n+----------------+  |\n|                   |\n|                   |\n+-------------------+',
             '+-------------------+\n|                   |\n|                   |\n|  +----------------+\n|  |\n|  |\n+--+']),
         (
             '\n           +-+             \n           | |             \n         +-+-+-+           \n         |     |           \n      +--+-----+--+        \n      |           |        \n   +--+-----------+--+     \n   |                 |     \n   +-----------------+     ',
             ['+-+\n| |\n+-+', '+-----+\n|     |\n+-----+', '+-----------+\n|           |\n+-----------+',
              '+-----------------+\n|                 |\n+-----------------+']),
         ('\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+',
          ['+---+\n|   |\n+---+', '+---+\n|   |\n+---+', '+---+\n|   |\n+---+', '+---+\n|   |\n+---+',
           '+---+\n|   |\n+---+', '+---+\n|   |\n+---+', '+---+\n|   |\n+---+', '+---+\n|   |\n+---+']),
         (
             '\n+---+------------+---+\n|   |            |   |\n+---+------------+---+\n|   |            |   |\n|   |            |   |\n|   |            |   |\n|   |            |   |\n+---+------------+---+\n|   |            |   |\n+---+------------+---+',
             ['+---+\n|   |\n+---+', '+---+\n|   |\n+---+', '+---+\n|   |\n+---+', '+---+\n|   |\n+---+',
              '+---+\n|   |\n|   |\n|   |\n|   |\n+---+', '+---+\n|   |\n|   |\n|   |\n|   |\n+---+',
              '+------------+\n|            |\n+------------+', '+------------+\n|            |\n+------------+',
              '+------------+\n|            |\n|            |\n|            |\n|            |\n+------------+']),
         (
             '\n                 \n   +-----+       \n   |     |       \n   |     |       \n   +-----+-----+ \n         |     | \n         |     | \n         +-----+ ',
             ['+-----+\n|     |\n|     |\n+-----+', '+-----+\n|     |\n|     |\n+-----+'])]),
    ('Nested pieces',
     [('\n+--------+\n|        |\n|  +--+  |\n|  |  |  |\n|  +--+  |\n|        |\n+--------+',
       ['+--+\n|  |\n+--+', '+--------+\n|        |\n|  +--+  |\n|  |  |  |\n|  +--+  |\n|        |\n+--------+'])]),
    ('Convoluted borders',
     [(
         '\n+-------+ +----------+\n|       | |          |\n| +-+ +-+ +-+    +-+ |\n+-+ | |     |  +-+ +-+\n    | +-----+--+\n+-+ |          +-+ +-+\n| +-+  +----+    | | |\n| |    |    |    +-+ |\n| +----++ +-+        |\n|       | |          |\n+-------+ +----------+',
         ['+-+\n| |\n| |\n| +-----+\n|       |\n+-------+',
          '+-------+\n|       |\n| +-+ +-+\n+-+ | |\n    | +--------+\n    |          +-+ +-+\n  +-+  +----+    | | |\n  |    |    |    +-+ |\n  +----+  +-+        |\n          |          |\n          +----------+',
          '+----------+\n|          |\n+-+    +-+ |\n  |  +-+ +-+\n  +--+'])]),
    ('edo_red97\'s big shape',
     [(
         '\n         +------------+--+      +--+\n         |            |  |      |  |\n         | +-------+  |  |      |  |\n         | |       |  |  +------+  |\n         | |       |  |            |\n         | |       |  |    +-------+\n         | +-------+  |    |        \n +-------+            |    |        \n |       |            |    +-------+\n |       |            |            |\n +-------+            |            |\n         |            |            |\n    +----+---+--+-----+------------+\n    |    |   |  |     |            |\n    |    |   |  +-----+------------+\n    |    |   |                     |\n    +----+---+---------------------+\n    |    |                         |\n    |    | +----+                  |\n+---+    | |    |     +------------+\n|        | |    |     |             \n+--------+-+    +-----+             ',
         ['    +----+\n    |    |\n    |    |\n+---+    |\n|        |\n+--------+',
          '+--+\n|  |\n|  +------------------+\n|                     |\n+---------------------+',
          '+--+      +--+\n|  |      |  |\n|  |      |  |\n|  +------+  |\n|            |\n|    +-------+\n|    |\n|    |\n|    +-------+\n|            |\n|            |\n|            |\n+------------+',
          '+---+\n|   |\n|   |\n|   |\n+---+', '+----+\n|    |\n|    |\n|    |\n+----+', '+-----+\n|     |\n+-----+',
          '+-------+\n|       |\n|       |\n+-------+', '+-------+\n|       |\n|       |\n|       |\n+-------+',
          '+------------+\n|            |\n+------------+',
          '+------------+\n|            |\n| +-------+  |\n| |       |  |\n| |       |  |\n| |       |  |\n| +-------+  |\n|            |\n|            |\n|            |\n|            |\n|            |\n+------------+',
          '+-------------------------+\n|                         |\n| +----+                  |\n| |    |     +------------+\n| |    |     |\n+-+    +-----+'])])]


@unittest.skip("Skip incomplete kata")
class SampleTests(unittest.TestCase):
    @parameterized.expand(test_data)
    def test_sample_tests(self, name, test_cases):
        for shape, expected in test_cases:
            actual = break_pieces(shape)
            if raw_errors:
                self.assertEqual(sorted(break_pieces(shape)), expected)
            else:
                self.assertIsInstance(actual, list, f'break_pieces should return a list; actual result: {actual}')
                actual = sorted(actual)
                if actual == expected:
                    self.assertTrue(True)
                    continue
                message = ['break_pieces failed on this shape:', shape, '', 'Actual result:']
                message.extend(actual)
                message.append('\nExpected result:')
                message.extend(expected)
                self.fail('\n'.join(message))
